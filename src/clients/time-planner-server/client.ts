/**
 * Generated by orval v6.18.1 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  Links200One,
  Links200Two,
  Links200Three,
  Health200One,
  Health200Two,
  Health200Three,
  HealthPath200One,
  HealthPath200Two,
  HealthPath200Three
} from './model'
import { customInstance } from '../../../config/axios-instance';



// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const validate = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<boolean>(
      {url: `/validateAuth`, method: 'get', signal
    },
      options);
    }
  

export const getValidateQueryKey = () => {
    
    return [`/validateAuth`] as const;
    }
  

    
export const getValidateQueryOptions = <TData = Awaited<ReturnType<typeof validate>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof validate>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {
    
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getValidateQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof validate>>> = ({ signal }) => validate(requestOptions, signal);

      
    
      
      
   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof validate>>, TError, TData> & { queryKey: QueryKey }
}

export type ValidateQueryResult = NonNullable<Awaited<ReturnType<typeof validate>>>
export type ValidateQueryError = unknown

export const useValidate = <TData = Awaited<ReturnType<typeof validate>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof validate>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getValidateQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Actuator root web endpoint
 */
export const links = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Links200One | Links200Two | Links200Three>(
      {url: `/actuator`, method: 'get', signal
    },
      options);
    }
  

export const getLinksQueryKey = () => {
    
    return [`/actuator`] as const;
    }
  

    
export const getLinksQueryOptions = <TData = Awaited<ReturnType<typeof links>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof links>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {
    
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getLinksQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof links>>> = ({ signal }) => links(requestOptions, signal);

      
    
      
      
   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof links>>, TError, TData> & { queryKey: QueryKey }
}

export type LinksQueryResult = NonNullable<Awaited<ReturnType<typeof links>>>
export type LinksQueryError = unknown

/**
 * @summary Actuator root web endpoint
 */
export const useLinks = <TData = Awaited<ReturnType<typeof links>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof links>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getLinksQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Actuator web endpoint 'health'
 */
export const health = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Health200One | Health200Two | Health200Three>(
      {url: `/actuator/health`, method: 'get', signal
    },
      options);
    }
  

export const getHealthQueryKey = () => {
    
    return [`/actuator/health`] as const;
    }
  

    
export const getHealthQueryOptions = <TData = Awaited<ReturnType<typeof health>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {
    
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof health>>> = ({ signal }) => health(requestOptions, signal);

      
    
      
      
   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData> & { queryKey: QueryKey }
}

export type HealthQueryResult = NonNullable<Awaited<ReturnType<typeof health>>>
export type HealthQueryError = unknown

/**
 * @summary Actuator web endpoint 'health'
 */
export const useHealth = <TData = Awaited<ReturnType<typeof health>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof health>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getHealthQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Actuator web endpoint 'health-path'
 */
export const healthPath = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<HealthPath200One | HealthPath200Two | HealthPath200Three>(
      {url: `/actuator/health/**`, method: 'get', signal
    },
      options);
    }
  

export const getHealthPathQueryKey = () => {
    
    return [`/actuator/health/**`] as const;
    }
  

    
export const getHealthPathQueryOptions = <TData = Awaited<ReturnType<typeof healthPath>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof healthPath>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {
    
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthPathQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthPath>>> = ({ signal }) => healthPath(requestOptions, signal);

      
    
      
      
   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthPath>>, TError, TData> & { queryKey: QueryKey }
}

export type HealthPathQueryResult = NonNullable<Awaited<ReturnType<typeof healthPath>>>
export type HealthPathQueryError = unknown

/**
 * @summary Actuator web endpoint 'health-path'
 */
export const useHealthPath = <TData = Awaited<ReturnType<typeof healthPath>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof healthPath>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getHealthPathQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


